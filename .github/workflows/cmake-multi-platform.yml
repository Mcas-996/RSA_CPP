# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            msystem: MINGW64
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Ensure cppcodec present
      shell: bash
      run: |
        if [ ! -f third_party/cppcodec/cppcodec/base64_rfc4648.hpp ]; then
          echo "cppcodec missing; cloning..."
          rm -rf third_party/cppcodec
          git clone --depth 1 https://github.com/tplgy/cppcodec.git third_party/cppcodec
        fi

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libglfw3-dev libssl-dev pkg-config

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install glfw openssl@3
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> "$GITHUB_ENV"

    - name: Setup MSYS2 environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: >-
          base-devel
          git
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-glfw

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake_args=(
          -B "${{ steps.strings.outputs.build-output-dir }}"
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        )
        if [ -n "${OPENSSL_ROOT_DIR:-}" ]; then
          cmake_args+=("-DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}")
        fi
        cmake_args+=(-S "${{ github.workspace }}")
        cmake "${cmake_args[@]}"

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        workspace=$(cygpath -u "$GITHUB_WORKSPACE")
        cmake -G Ninja \
          -B "$workspace/build" \
          -S "$workspace" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DOPENSSL_ROOT_DIR=/mingw64

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        workspace=$(cygpath -u "$GITHUB_WORKSPACE")
        cmake --build "$workspace/build" --config ${{ matrix.build_type }}

    - name: Test (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        workspace=$(cygpath -u "$GITHUB_WORKSPACE")
        cd "$workspace/build"
        ctest --build-config ${{ matrix.build_type }}
